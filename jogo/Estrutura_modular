src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ Game/
â”‚   â”‚   â”œâ”€â”€ CloudClimber.js          # Componente principal
â”‚   â”‚   â”œâ”€â”€ GameCanvas.js            # Canvas e renderizaÃ§Ã£o
â”‚   â”‚   â”œâ”€â”€ GameUI.js                # Interface (HUD, menus)
â”‚   â”‚   â””â”€â”€ GameControls.js          # InstruÃ§Ãµes de controle
â”‚   â””â”€â”€ Common/
â”‚       â””â”€â”€ Button.js                # BotÃ£o reutilizÃ¡vel
â”œâ”€â”€ game/
â”‚   â”œâ”€â”€ Player.js                    # LÃ³gica do jogador
â”‚   â”œâ”€â”€ Platform.js                  # LÃ³gica das plataformas
â”‚   â”œâ”€â”€ Camera.js                    # Sistema de cÃ¢mera
â”‚   â”œâ”€â”€ Physics.js                   # Sistema de fÃ­sica
â”‚   â”œâ”€â”€ Input.js                     # Gerenciamento de input
â”‚   â”œâ”€â”€ Collision.js                 # DetecÃ§Ã£o de colisÃ£o
â”‚   â”œâ”€â”€ GameState.js                 # Estados do jogo
â”‚   â””â”€â”€ Renderer.js                  # Sistema de renderizaÃ§Ã£o
â”œâ”€â”€ constants/
â”‚   â”œâ”€â”€ gameConfig.js                # ConfiguraÃ§Ãµes do jogo
â”‚   â””â”€â”€ gameConstants.js             # Constantes gerais
â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ mathUtils.js                 # FunÃ§Ãµes matemÃ¡ticas
â”‚   â””â”€â”€ gameUtils.js                 # UtilitÃ¡rios do jogo
â””â”€â”€ hooks/
    â”œâ”€â”€ useGameLoop.js               # Hook do loop principal
    â”œâ”€â”€ useKeyboard.js               # Hook de teclado
    â””â”€â”€ useGameState.js              # Hook de estado do jogo



ğŸ“‹ DescriÃ§Ã£o dos Arquivos
Components (Componentes React)

CloudClimber.js - Componente principal que orquestra tudo
GameCanvas.js - Gerencia o canvas e renderizaÃ§Ã£o
GameUI.js - Interface do usuÃ¡rio (HUD, menus, pontuaÃ§Ã£o)
Button.js - Componente de botÃ£o reutilizÃ¡vel

Game (LÃ³gica do Jogo)

Player.js - MovimentaÃ§Ã£o, estado e propriedades do jogador
Platform.js - CriaÃ§Ã£o, movimento e propriedades das plataformas
Camera.js - Sistema de cÃ¢mera que segue o jogador
Physics.js - Gravidade, velocidade, saltos
Input.js - Captura e processamento de teclas
Collision.js - DetecÃ§Ã£o de colisÃµes entre objetos
GameState.js - Gerenciamento dos estados (menu, jogando, game over)
Renderer.js - RenderizaÃ§Ã£o de todos os elementos visuais

Constants (ConfiguraÃ§Ãµes)

gameConfig.js - ConfiguraÃ§Ãµes ajustÃ¡veis (velocidades, tamanhos)
gameConstants.js - Constantes fixas do jogo

Utils (UtilitÃ¡rios)

mathUtils.js - FunÃ§Ãµes matemÃ¡ticas auxiliares
gameUtils.js - FunÃ§Ãµes utilitÃ¡rias gerais

Hooks (React Hooks Customizados)

useGameLoop.js - Hook para o loop principal do jogo
useKeyboard.js - Hook para captura de teclas
useGameState.js - Hook para gerenciar estado do jogo

ğŸ”§ Vantagens desta Estrutura
1. SeparaÃ§Ã£o de Responsabilidades

Cada arquivo tem uma responsabilidade especÃ­fica
Facilita encontrar e modificar funcionalidades

2. ReutilizaÃ§Ã£o de CÃ³digo

Componentes e funÃ§Ãµes podem ser reutilizados
Hooks customizados para lÃ³gicas comuns

3. Facilidade de ManutenÃ§Ã£o

Bugs sÃ£o mais fÃ¡ceis de localizar
ModificaÃ§Ãµes nÃ£o afetam outros sistemas

4. Escalabilidade

FÃ¡cil adicionar novos recursos
Estrutura preparada para crescimento

5. Testabilidade

Cada mÃ³dulo pode ser testado independentemente
FunÃ§Ãµes puras facilitam testes unitÃ¡rios
